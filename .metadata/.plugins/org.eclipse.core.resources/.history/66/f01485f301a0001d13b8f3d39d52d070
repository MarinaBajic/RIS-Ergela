package com.example.demo.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.demo.repository.ErgelaKorisnikRepository;
import com.example.demo.repository.ErgelaUlogaRepository;
import com.example.demo.repository.KonjRepository;

import model.ErgelaKorisnik;
import model.ErgelaUloga;

@Controller
@RequestMapping(value = "/auth")
public class LoginKontroler {

	@Autowired
	ErgelaKorisnikRepository korisnikRepo;

	@Autowired
	ErgelaUlogaRepository ulogaRepo;

	@Autowired
	KonjRepository konjRepo;

	@ModelAttribute
	public void getUloge(Model model) {
		List<ErgelaUloga> uloge = ulogaRepo.findAll();
		model.addAttribute("uloge", uloge);
	}

	@GetMapping(value = "/loginPage")
	public String loginPage() {
		return "login";
	}

	@PostMapping(value = "/login")
	public String loginHello() {
		return "home";
	}

	@GetMapping(value = "/registerUser")
	public String newUser(Model model) {
		ErgelaKorisnik korisnik = new ErgelaKorisnik();
		model.addAttribute("korisnik", korisnik);
		return "register";
	}

	@PostMapping(value = "/register")
	public String saveUser(@ModelAttribute("korisnik") ErgelaKorisnik korisnik, HttpServletRequest request) {
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		korisnik.setLozinka(passwordEncoder.encode(korisnik.getLozinka()));

		for (ErgelaUloga uloga : korisnik.getUlogas()) {
			uloga.addKorisnik(korisnik);

		}
		korisnikRepo.save(korisnik);
		
		return "login";
	}

	@GetMapping(value = "/logout")
	public String logoutPage(HttpServletRequest request, HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null) {
			SecurityContextHolder.getContext().setAuthentication(null);
		}
		return "redirect:/auth/loginPage";
	}

	@GetMapping(value = "/home")
	public String getPocetna() {
		return "home";
	}
	
	@InitBinder
	protected void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(true);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
	}
}
